import { useActor, useSelector } from "@xstate/react"
import type { NextPage } from "next"
import Head from "next/head"
import { FormEvent, useContext, useEffect, useState } from "react"
import { AuthStateMachine } from "./machines/authMachine"
import { GlobalStateContext } from "./_app"
import { ethers } from "ethers"

const selectUser = (machine: AuthStateMachine) => machine.context.user
const selectError = (machine: AuthStateMachine) => machine.context.error

const Home: NextPage = () => {
  const { authService } = useContext(GlobalStateContext)
  const [state, send] = useActor(authService)
  const error = useSelector(authService, selectError)
  const user = useSelector(authService, selectUser)

  const [transactions, setTransactions] = useState<null | any>(null)
  useEffect(() => console.log(transactions), [transactions])

  const onSubmit = async (e: FormEvent) => {
    e.preventDefault()

    const tx1 = e.target.tx1.value
    const tx2 = e.target.tx2.value

    const provider = {
      mainnet: new ethers.providers.InfuraProvider(
        "homestead",
        "cd3191fb4c5d46ea8916dbbacb904b4b"
      ),
      polygon: new ethers.providers.AlchemyProvider(
        "matic",
        "epIIrIB4Qiv8MX6viqdNdINEDBB1D9Fn"
      ),
    }

    const promises = await Promise.allSettled([
      provider.mainnet
        .getTransaction(tx1)
        .then(res => ({ status: "fetched", res }))
        .catch(err => ({ status: "error", err })),
      provider.polygon
        .getTransaction(tx2)
        .then(res => ({ status: "fetched", res }))
        .catch(err => ({ status: "error", err })),
    ])

    setTransactions({ tx1: promises[0].value, tx2: promises[1].value })
  }

  return (
    <div className="container mx-auto">
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main>
        <h1 className="text-2xl py-8">Welcome to yome's playground ðŸŽ¯ðŸ‘¾</h1>

        <div className="border rounded border-slate-300 px-4 py-2">
          <p>
            <strong>Experiment #1:</strong> Login with blocknative & xstate
          </p>
          <p>
            Current state of authService <code>{state.value}</code>
          </p>
          {state.context.user ? (
            <Button onClick={() => send("LOGOUT")}>Log out</Button>
          ) : (
            <Button onClick={() => send("INITIALIZE")}>Login</Button>
          )}
          {state.context.error && <p>Error: {error}</p>}
          {state.context.user && (
            <p>
              User: <code>{user.address}</code>
            </p>
          )}
        </div>

        <div className="border rounded border-slate-300 px-4 py-2 mt-2">
          <p>
            <strong>Experiment #2:</strong> Query 2 transactions on 2 differents
            chain
          </p>
          <form onSubmit={onSubmit}>
            <input
              placeholder="mainnet tx"
              id="tx1"
              name="tx1"
              className="border"
            />
            <input
              placeholder="polygon tx"
              id="tx2"
              name="tx2"
              className="border"
            />
            <Button type="submit">Query !</Button>

            {transactions && (
              <div className="flex mt-2">
                <Transaction {...transactions.tx1} network={"mainnet"} />
                <Transaction {...transactions.tx2} network={"polygon"} />
              </div>
            )}
          </form>
        </div>
      </main>
    </div>
  )
}

const Button = (props: any) => (
  <button
    {...props}
    className="border rounded border-slate-300 hover:border-slate-500 px-2 mt-2"
  >
    {props.children}
  </button>
)

interface TransactionProps {
  status: string
  network: string
  res?: object
  err?: Error
}
const Transaction = (props: TransactionProps) => {
  const { status, res, err, network } = props

  return (
    <div className="grow border rounded border-slate-300 px-4 py-2 overflow-auto">
      Tx on <strong>{network}</strong>:
      {status === "error" && err ? (
        err.toString()
      ) : (
        <pre>{JSON.stringify(res, null, 2)}</pre>
      )}
    </div>
  )
}

export default Home
